{"version":3,"sources":["webpack:///src/app/home/home-routing.module.ts","webpack:///src/app/home/home.page.html","webpack:///src/app/home/home.module.ts","webpack:///src/app/home/home.page.scss","webpack:///src/app/home/home.page.ts"],"names":["routes","path","component","HomePageRoutingModule","imports","forChild","exports","HomePageModule","declarations","HomePage","popoverController","loadingController","pickerCtrl","payPal","reedemUSD","reedemHTG","reedemMethod","totalTransac","account","amount","devise","refillHistoric","transaction","showMethod","opts","buttons","text","role","columns","name","options","value","create","picker","present","onDidDismiss","then","response","getColumn","col","selectedIndex","console","log","init","PayPalEnvironmentProduction","PayPalEnvironmentSandbox","prepareToRender","payment","renderSinglePaymentUI","showBackdrop","backdropDismiss","cssClass","mode","popover","componentProps","currentAmount","onWillDismiss","message","duration","load","currentTransaction","data","push","selector","template"],"mappings":"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","file":"home-home-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HomePage } from './home.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class HomePageRoutingModule {}\n","export default \"<ion-header  mode=ios>\\n  <ion-toolbar  color=\\\"dark\\\">\\n    <ion-title>\\n      LAJAN RAPID\\n     </ion-title>\\n  </ion-toolbar>\\n  <ion-buttons>\\n    <ion-item-divider>\\n      <ion-label>Rapid, fasil epi garanti</ion-label>\\n    </ion-item-divider>\\n  </ion-buttons>\\n </ion-header>\\n\\n<ion-content>\\n\\n  <div  class=\\\"ion-padding\\\">\\n\\n   \\n    <div>\\n\\n      <div class=\\\"container-fluid border rounded\\\">\\n        <ion-item lines=\\\"none\\\" >\\n          <ion-label>Rapid balance :</ion-label>\\n          <ion-badge slot=\\\"end\\\" color=\\\"medium\\\">{{account.amount | currency}}</ion-badge>\\n        </ion-item>\\n      </div>\\n     <div class=\\\"container-fluid border mt-3\\\">\\n        <ion-item>\\n          <ion-label>Refill your account</ion-label>\\n          <ion-chip slot=\\\"end\\\">Devise : {{account.devise}}</ion-chip>\\n        </ion-item>\\n        <ion-item-sliding>\\n          <ion-slides [options]=\\\"{ slidesPerView: '1.5', zoom: false, grabCursor: true }\\\">\\n            <ng-container *ngIf=\\\"account.devise=='USD'\\\">\\n              <ion-slide (click)=\\\"refill('USD',star)\\\" *ngFor=\\\"let star of reedemUSD\\\"><ion-card>\\n                <ion-card-content>\\n                  <ion-card-title>{{star|currency}}</ion-card-title>\\n                  <ion-card-subtitle>Add {{star|currency}} to your star card</ion-card-subtitle>\\n                </ion-card-content>\\n                </ion-card></ion-slide>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"account.devise=='HTG'\\\">\\n              <ion-slide *ngFor=\\\"let star of reedemHTG\\\"><ion-card>\\n                <ion-card-content>\\n                  <ion-card-title>{{star}} gdes</ion-card-title>\\n                  <ion-card-subtitle>Add {{star}} gdes to your star card</ion-card-subtitle>\\n                </ion-card-content>\\n                </ion-card></ion-slide>\\n            </ng-container>\\n          \\n    \\n          </ion-slides>\\n        </ion-item-sliding>\\n      </div>\\n    \\n      <div class=\\\"container-fluid border mt-3\\\">\\n        <ion-list>\\n          <ion-item><ion-label>Reedem Historic</ion-label></ion-item>\\n          <ion-row>\\n            <ion-col size=\\\"7\\\"><b>Amount</b></ion-col>\\n            <ion-col ><b>purchased date</b></ion-col>\\n          </ion-row>\\n          <ion-row *ngFor=\\\"let reedem of account.refillHistoric\\\">\\n            <ion-col size=\\\"7\\\"><ion-label>{{reedem.amount}}</ion-label></ion-col>\\n            <ion-col ><ion-label>{{reedem.date|date}}</ion-label></ion-col>\\n          </ion-row>\\n          <ion-item><ion-label>Total Refilling</ion-label>\\n                    <ion-badge slot=\\\"end\\\">0.00$</ion-badge>\\n          </ion-item>\\n        </ion-list>\\n        \\n      </div>\\n    \\n      <div class=\\\"container-fluid border mt-3\\\">\\n        <ion-list>\\n          <ion-item><ion-label>Transactions</ion-label></ion-item>\\n          <ion-row >\\n            <ion-col size=\\\"4\\\"><b>Id</b></ion-col>\\n            <ion-col size=\\\"4\\\"><b>Amount</b></ion-col>\\n            <ion-col ><b>Transaction date</b></ion-col>\\n          </ion-row>\\n          <ion-row *ngFor=\\\"let transac of account.transaction\\\">\\n            <ion-col size=\\\"4\\\"><ion-label> {{transac.id}} </ion-label></ion-col>\\n            <ion-col size=\\\"4\\\"><ion-label>{{transac.amount}}</ion-label></ion-col>\\n            <ion-col ><ion-label>{{transac.date|date}}</ion-label></ion-col>\\n          </ion-row>\\n          <ion-item><ion-label>Total Transactions</ion-label>\\n                    <ion-badge slot=\\\"end\\\">{{totalTransac|currency}}</ion-badge>\\n          </ion-item>\\n        </ion-list>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row mt-3 p-3 align-right\\\">\\n      <div class=\\\"col-lg-9 col-md-9 col-9\\\">\\n        <ion-fab (click)=\\\"OpenSettingDialog()\\\">\\n          <ion-fab-button color=\\\"light\\\">\\n             <ion-icon size=\\\"large\\\" name=\\\"settings\\\"></ion-icon>\\n          </ion-fab-button>\\n        </ion-fab>\\n      </div>\\n      <div class=\\\"col-lg-3 col-md-3 col-3\\\">\\n        <ion-fab (click)=\\\"OpenSenderDialog()\\\">\\n          <ion-fab-button >\\n            <ion-thumbnail >\\n              <ion-img src=\\\"../../assets/icon/logo_lajanrapid.png\\\"></ion-img>\\n            </ion-thumbnail>\\n          </ion-fab-button>\\n        </ion-fab>\\n      </div>\\n        \\n      \\n      \\n    </div>\\n  </div>\\n  \\n \\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { HomePageRoutingModule } from './home-routing.module';\n\nimport { HomePage } from './home.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    HomePageRoutingModule\n  ],\n  declarations: [HomePage]\n})\nexport class HomePageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hvbWUvaG9tZS5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { LoadingController, PickerController, PopoverController } from '@ionic/angular';\nimport { Account, transactions } from 'src/models/account';\nimport { PopuptransferComponent } from '../popuptransfer/popuptransfer.component';\nimport { PickerOptions } from '@ionic/core';\nimport { PopupsettingComponent } from '../popupsetting/popupsetting.component';\nimport { PayPal, PayPalPayment, PayPalConfiguration } from '@ionic-native/paypal/ngx';\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.page.html',\n  styleUrls: ['./home.page.scss'],\n})\nexport class HomePage implements OnInit {\n  account!: Account;\n  reedemUSD = ['20','50','100','200','250','500'];\n  reedemHTG = ['250','500','750','1000','5000','10.000'];\n  reedemMethod = '';\n  totalTransac = 0;\n  constructor(private popoverController: PopoverController, private loadingController: LoadingController,\n    private pickerCtrl: PickerController, private payPal: PayPal) { }\n\n  ngOnInit() {\n    this.account = {} as Account;\n    this.account.amount=1000;\n    this.account.devise= 'USD';\n    this.account.refillHistoric = [];\n    this.account.transaction = [];\n  }\n\n  refill(devise: string, amount: string){\n      this.showMethod(amount);\n  }\n\n    async showMethod(amount:string) {\n    const opts: PickerOptions = {\n      buttons: [\n        {\n          text: 'Done',\n          role: 'validate'\n        },\n        {\n          text: 'Cancel',\n          role: 'cancel'\n        }\n      ],\n      columns: [\n        {\n          name: 'method',\n          options: [\n            { text: 'Wester-Union', value: 'WU' },\n            { text: 'MonCash$', value: 'MC' },\n            { text: 'Paypal', value: 'PP' },\n            { text: 'Zelle', value: 'ZLL' },\n            { text: 'CashApp', value: 'CA' },\n            { text: 'MoneyGram', value: 'MG' },\n          ]\n\n        }\n      ]\n    };\n    const picker = await this.pickerCtrl.create(opts);\n    picker.present();\n    picker.onDidDismiss().then(async response => {\n      switch(response.role){\n        case 'validate':\n          const col = await picker.getColumn('method');\n          this.reedemMethod = col.options[col.selectedIndex].text;\n          if (this.reedemMethod === 'MonCash$'){\n            console.log('moncash');\n          }else if (this.reedemMethod === 'PayPal'){\n            console.log('Paypal');\n            this.payPal.init({\n              PayPalEnvironmentProduction: 'YOUR_PRODUCTION_CLIENT_ID',\n              PayPalEnvironmentSandbox: 'YOUR_SANDBOX_CLIENT_ID'\n            }).then(() => {\n              // Environments: PayPalEnvironmentNoNetwork, PayPalEnvironmentSandbox, PayPalEnvironmentProduction\n              this.payPal.prepareToRender('PayPalEnvironmentSandbox', new PayPalConfiguration({\n                // Only needed if you get an \"Internal Service Error\" after PayPal login!\n                //payPalShippingAddressOption: 2 // PayPalShippingAddressOptionPayPal\n              })).then(() => {\n                let payment = new PayPalPayment(amount, 'USD', 'Refill balance', 'sale');\n                this.payPal.renderSinglePaymentUI(payment).then(() => {\n                  // Successfully paid\n            \n                  // Example sandbox response\n                  //\n                  // {\n                  //   \"client\": {\n                  //     \"environment\": \"sandbox\",\n                  //     \"product_name\": \"PayPal iOS SDK\",\n                  //     \"paypal_sdk_version\": \"2.16.0\",\n                  //     \"platform\": \"iOS\"\n                  //   },\n                  //   \"response_type\": \"payment\",\n                  //   \"response\": {\n                  //     \"id\": \"PAY-1AB23456CD789012EF34GHIJ\",\n                  //     \"state\": \"approved\",\n                  //     \"create_time\": \"2016-10-03T13:33:33Z\",\n                  //     \"intent\": \"sale\"\n                  //   }\n                  // }\n                }, () => {\n                  // Error or render dialog closed without being successful\n                });\n              }, () => {\n                // Error in configuration\n              });\n            }, () => {\n              // Error in initialization, maybe PayPal isn't supported or something else\n            });\n\n\n          }\n          break;\n\n          case 'cancel':\n            break;\n\n      }\n      \n    });\n  } \n\n  async OpenSettingDialog(){\n    const popover = await this.popoverController.create({\n      component: PopupsettingComponent,\n      showBackdrop: true,\n      backdropDismiss: true,\n      cssClass: 'my-custom-class',\n      mode: 'ios'\n    });\n    popover.present();\n  }\n  async OpenSenderDialog(){\n    const popover = await this.popoverController.create({\n      component: PopuptransferComponent,\n      componentProps: {currentAmount:this.account.amount},\n      showBackdrop: true,\n      backdropDismiss: true,\n      cssClass: 'my-custom-class',\n      mode: 'ios'\n    });\n\n    popover.onWillDismiss().then((response)=>{\n      if(response.role=='transfert'){\n        this.loadingController.create({\n          cssClass: 'my-custom-class',\n              message: 'Please wait...',\n              duration: 2000\n        }).then((load)=>{\n          load.present();\n          let currentTransaction: transactions = response.data;\n          this.account.amount = this.account.amount - currentTransaction.amount;\n          this.account.transaction.push(currentTransaction);\n          this.totalTransac = this.totalTransac + currentTransaction.amount;\n        });\n       \n      }\n    })\n    popover.present();\n  }\n\n}\n"]}